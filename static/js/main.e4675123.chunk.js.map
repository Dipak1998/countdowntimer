{"version":3,"sources":["component/Timer/Timer.js","component/DateInput/DateInput.js","component/App.js","reportWebVitals.js","index.js"],"names":["Timer","day","hour","minute","second","className","DateInput","getDate","setDateString","type","onChange","placeholder","onClick","App","props","ev","console","log","target","value","setState","input","dateString","state","x","setInterval","curr_time","Date","getTime","diff_time","days","Math","floor","hours","minutes","seconds","errorMessage","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAiBeA,MAdf,YAA0C,IAA1BC,EAAyB,EAAzBA,IAAIC,EAAqB,EAArBA,KAAKC,EAAgB,EAAhBA,OAAOC,EAAS,EAATA,OAC5B,OACI,qBAAKC,UAAU,kBAAf,SACA,sBAAKA,UAAU,kBAAf,UACA,2CACI,yCAAUJ,EAAV,OACA,yCAAUC,EAAV,OACA,yCAAUC,EAAV,OACA,yCAAUC,EAAV,a,MCCGE,MATf,YAA6C,IAAzBC,EAAwB,EAAxBA,QAAQC,EAAgB,EAAhBA,cACxB,OACI,sBAAKH,UAAU,mBAAf,UACA,uBAAOI,KAAK,OAAOC,SAAUH,EAASI,YAAY,8CAClD,wBAASC,QAASJ,EAAlB,wBCHaK,E,kDAEjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAaVP,QAAS,SAACQ,GACPC,QAAQC,IAAIF,EAAGG,OAAOC,OACtB,EAAKC,SAAS,CACVC,MAAMN,EAAGG,OAAOC,SAjBL,EAoBlBX,cAAc,WACV,EAAKY,SAAS,CACVE,WAAY,EAAKC,MAAMF,SAtBb,EA8BlBG,EAAIC,aAAa,WACb,IAAMC,GAAY,IAAIC,MAAOC,UAGvBC,EADc,IAAIF,KAAK,EAAKJ,MAAMD,YAAYM,UAClBF,EAC9BI,EAAOC,KAAKC,MAAMH,EAAU,OAC5BI,EAAQF,KAAKC,MAAOH,EAAS,MAAV,MACnBK,EAAUH,KAAKC,MAAOH,EAAS,KAAV,KACrBM,EAAUJ,KAAKC,MAAOH,EAAS,IAAc,KAEjD,EAAKT,SAAS,CACVnB,IAAI6B,EACJ5B,KAAK+B,EACL9B,OAAO+B,EACP9B,OAAO+B,EACPN,UAAWA,MAGjB,KA9CE,EAAKN,MAAO,CACRtB,IAAK,EACLC,KAAK,EACLC,OAAO,EACPC,OAAO,EACPyB,UAAU,EACVR,MAAM,GACNC,WAAW,GACXc,aAAa,IAVH,E,0CAkDd,WACA,OACI,sBAAK/B,UAAU,WAAf,UACiC,KAA1BgC,KAAKd,MAAMD,WACd,cAAC,EAAD,CAAOrB,IAAK,EAAGC,KAAM,EAAGC,OAAQ,EAAGC,OAAQ,IACxCiC,KAAKd,MAAMM,UAAY,EACtB,oBAAIxB,UAAU,gBAAd,oDACA,cAAC,EAAD,CAAOJ,IAAKoC,KAAKd,MAAMtB,IAAKC,KAAMmC,KAAKd,MAAMrB,KAAMC,OAAQkC,KAAKd,MAAMpB,OAAQC,OAAQiC,KAAKd,MAAMnB,SAKrG,cAAC,EAAD,CAAWG,QAAS8B,KAAK9B,QAASC,cAAe6B,KAAK7B,uB,GAhErC8B,aCQlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e4675123.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Timer.css';\r\n\r\nfunction Timer({day,hour,minute,second}) {\r\n    return (\r\n        <div className=\"timer-container\">\r\n        <div className=\"count-down-time\">\r\n        <h1>Time Left</h1>\r\n            <span>{`${day}d`}</span>\r\n            <span>{`${hour}h`}</span>\r\n            <span>{`${minute}m`}</span>\r\n            <span>{`${second}s`}</span>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Timer;","import React from 'react';\r\nimport './DateInput.css';\r\n\r\nfunction DateInput({getDate,setDateString}) {\r\n    return (\r\n        <div className=\"date-input-field\">\r\n        <input type=\"text\" onChange={getDate} placeholder=\"Enter the date like: 1 jan 2022 20:45:56 \"/>\r\n        <button  onClick={setDateString}>Submit</button>                \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DateInput\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport './App.css'\r\nimport Timer from './Timer/Timer';\r\nimport DateInput from './DateInput/DateInput';\r\nexport default class App extends Component {\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            day: 0,\r\n            hour:0,\r\n            minute:0,\r\n            second:0,\r\n            diff_time:0,\r\n            input:'',\r\n            dateString:'',\r\n            errorMessage:''\r\n        } \r\n        \r\n    }\r\n    getDate =(ev)=>{\r\n       console.log(ev.target.value);\r\n       this.setState({\r\n           input:ev.target.value\r\n       })\r\n    }\r\n    setDateString=()=>{\r\n        this.setState({\r\n            dateString: this.state.input\r\n        })\r\n\r\n        \r\n\r\n    }\r\n   \r\n\r\n    x = setInterval( ()=>{\r\n        const curr_time = new Date().getTime();\r\n\r\n        var countDownDate = new Date(this.state.dateString).getTime();\r\n        const diff_time = countDownDate - curr_time;\r\n        var days = Math.floor(diff_time/(1000*60*60*24));\r\n        var hours = Math.floor((diff_time %(1000*60*60*24))/(1000*60*60));\r\n        var minutes = Math.floor((diff_time %(1000*60*60))/(1000*60));\r\n        var seconds = Math.floor((diff_time %(1000*60))/(1000));\r\n          \r\n        this.setState({\r\n            day:days,\r\n            hour:hours,\r\n            minute:minutes,\r\n            second:seconds,\r\n            diff_time: diff_time\r\n        })\r\n\r\n    },1000)\r\n  \r\n        render() {\r\n        return (\r\n            <div className=\"Main-app\">\r\n                { (this.state.dateString === '' )? \r\n                <Timer day={0} hour={0} minute={0} second={0}/>\r\n                : (this.state.diff_time < 0 ? \r\n                    <h1 className=\"error-message\">Please Choose a Present or Future Date</h1> :\r\n                    <Timer day={this.state.day} hour={this.state.hour} minute={this.state.minute} second={this.state.second}/>\r\n                ) \r\n\r\n            }\r\n            {/* print erro message if date is not valid */}\r\n                <DateInput getDate={this.getDate} setDateString={this.setDateString} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}